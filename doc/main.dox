/**
@mainpage TT Language

@section intro Introduction

@subpage tt_tech

Sample definitions:


        OrderedCollection class [
            main: args [ '{1}/{2}' format: {10. 'Peter ist doof!'} ]
            main2: args [ 
                1 to: 9 do: [ :i | 
                    1 to: i do: [ :j | 
                        Transcript 
                            show: ('{1} * {2} = {3}' format: {j. i. j * i}); 
                            show: ' ' 
                    ]. 
                    Transcript show: ' '; cr. 
                ]
            ]
        ]
        String [
        format: collection [
            "
            Format the receiver by interpolating elements from collection,
            as in the following examples:
            ('Five is {1}.' format: { 1 + 4}) 
                        >>> 'Five is 5.'
            ('Five is {five}.' format: (Dictionary with: #five -> 5)) 
                        >>>  'Five is 5.'
            ('In {1} you can escape \{ by prefixing it with \\' format: {'strings'}) 
                        >>> 'In strings you can escape { by prefixing it with \' 
            ('In \{1\} you can escape \{ by prefixing it with \\' format: {'strings'}) 
                        >>> 'In {1} you can escape { by prefixing it with \' 
            "

            ^ self species
                new: self size
                streamContents: [ :result | 
                    | stream |
                    stream := self readStream.
                    [ stream atEnd ]
                        whileFalse: [ | currentChar |
                            (currentChar := stream next) == ${
                                ifTrue: [ | expression index |
                                    expression := stream upTo: $}.
                                    index := Integer readFrom: expression ifFail: [ expression ].
                                    result nextPutAll: (collection at: index) asString ]
                                ifFalse: [ 
                                    currentChar == $\
                                        ifTrue: [ stream atEnd
                                                ifFalse: [ result nextPut: stream next ] ]
                                        ifFalse: [ result nextPut: currentChar ] ] ] ] ]
        ]
        Stream [
          nextPutAll: aCollection [^ aCollection do: [:each | self nextPut: each]]
        ]
        ByteArray class [
              newWithSize: n []
        ]


*/



/**
@page tt_tech TT Technical Details


@section features Main Features

@section Technical Details

@subpage memory

@subpage syntax

@subpage implementation
*/
